name: CMake

on: [push]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Setup Windows 10 SDK Action
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
      with:
        sdk-version: 22621

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Checkout submodules
      shell: bash
      run: git submodule update --init --recursive
      
    - name: Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        
    - name: Set VCPKG_ROOT
      run: |
        echo "VCPKG_ROOT=$(Get-Location)\vcpkg" >> $env:GITHUB_ENV
      shell: powershell

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE --preset=vcpkg
      env:
        VCPKG_ROOT: ${{ env.VCPKG_ROOT }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config RelWithDebInfo
      env:
        VCPKG_ROOT: ${{ env.VCPKG_ROOT }}

    - name: Save output
      uses: actions/upload-artifact@v4
      with:
        path: ${{runner.workspace}}/GWToolboxpp/bin/RelWithDebInfo/
